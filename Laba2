import numpy as np
import random
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score
from PIL import Image

from google.colab import drive
drive.mount('/content/drive')

plt.figure(figsize=(15,15))
def GetImg(path):
  test_img = Image.open(path)
  test_img = test_img.resize((12, 12))
  plt.subplot(2,4,i)
  plt.imshow(test_img, cmap = "gray")
  test_img = test_img.convert('1')
  test_x = np.array(test_img, np.float32)
  test_x = test_x.reshape([-1, 144])
  return test_x

x_train = []
y_train = []
  
path = '/content/drive/My Drive/Cars/'
for i in range(1,9):
  x_train.append(GetImg(path + str(i) +'.png')[0])
  if i <= 4:
    y_train.append(0)
  else:
    y_train.append(1)

print(x_train[0])
print(y_train)

def step_func(x):
  if(x > 0):
    return 1
  else:
    return 0

def fun_sigmoid(s):
  return 1 / (1 + np.exp(-s))

def fun_der_sigm(s):
  return fun_sigmoid(s) * (1 - fun_sigmoid(s))

def err_acc(pred_y, tst_y, eps):
  hit = 0
  for i in range(len(tst_y)):
    if(np.abs(pred_y[i] - tst_y[i]) < eps): hit = hit + 1
  return hit / len(tst_y)

def err_los(pred_y, tst_y):
  loss = 0
  for i in range(len(tst_y)):
    loss += np.square(pred_y[i] - tst_y[i])
  loss = np.sqrt(loss) / len(tst_y)
  return loss

def fun_sigmoid(s):
  return 1 / (1 + np.exp(-s))

def fun_der_sigm(s):
  return fun_sigmoid(s) * (1 - fun_sigmoid(s))

def err_acc(pred_y, tst_y, eps):
  hit = 0
  for i in range(len(tst_y)):
    if(np.abs(pred_y[i] - tst_y[i]) < eps): hit = hit + 1
  return hit / len(tst_y)

def err_los(pred_y, tst_y):
  loss = 0
  for i in range(len(tst_y)):
    loss += np.square(pred_y[i] - tst_y[i])
  loss = np.sqrt(loss) / len(tst_y)
  return loss

class Neuron:
  def __init__(self, weightsCount, number = None):
    if number is None: 
      self.weights = []
      for i in range(weightsCount):
        self.weights.append(np.random.normal() * 3)
      self.bias = np.random.normal() * 3
    else:
      self.weights = [] 
      for i in range(weightsCount):
        self.weights.append(number)
      self.bias = number

  def get_sum(self, x):
    sum = self.bias
    for i in range(len(self.weights)):
      sum += self.weights[i] * x[i]
    return sum

  def feed(self, x):
    y = fun_sigmoid(self.get_sum(x))
    return y

  def print_params(self):
    n_str = ''
    for i in range(len(self.weights)):
      n_str += str(self.weights[i]) + " "
    print(n_str + str(self.bias))

  def change_weights(self, value, x):
    for i in range(len(self.weights)):
      if(x[i] == 1):
        self.weights[i] += value
    self.bias += value

class Network:
  def __init__(self, x_count):
    self.NeuronsL1 = []
    self.NeuronsL2 = []
    self.NeuronsL3 = Neuron(12)
    for i in range(25):
      n = Neuron(x_count)
      self.NeuronsL1.append(n)
    for i in range(12):
      n = Neuron(25)
      self.NeuronsL2.append(n)

  def predict(self, data):
    y_pred = []
    for x in data:
      res1 = []
      for n in self.NeuronsL1:
        res1.append(n.feed(x))
      res2 = []
      for n in self.NeuronsL2:
        res2.append(n.feed(res1))
      y_pred.append(self.NeuronsL3.feed(res2))
    return y_pred

  def trainGrad(self, data, y_trues, speed, epochs):
    errs = []
    epchs = []
    for epoch in range(epochs):
      for x, y_true in zip(data, y_trues):
        self.grad_iteration(x, y_true, speed)
      if epoch % (epochs // 10) == 0:
        y_preds = self.predict(data)
        err = err_los(y_trues, y_preds)
        acc = err_acc(y_trues, y_preds, 0.1)
        epchs.append(epoch)
        errs.append(err)
        print("Epoch %d err: %.3f" % (epoch, err))
        print("Epoch %d acc: %.3f" % (epoch, acc))
    return epchs, errs

  def trainGradStochastic(self, data, y_trues, speed, epochs):
    errs = []
    epchs = []
    for epoch in range(epochs):
      n_rule = np.random.randint(0, len(data))
      x = data[n_rule]
      y_true = y_trues[n_rule]
      self.grad_iteration(x, y_true, speed)
      if epoch % (epochs // 10) == 0:
        y_preds = self.predict(data)
        err = err_los(y_trues, y_preds)
        epchs.append(epoch)
        errs.append(err)
        acc = err_acc(y_trues, y_preds, 0.1)
        print("Epoch %d err: %.3f" % (epoch, err))
        print("Epoch %d acc: %.3f" % (epoch, acc))
    return epchs, errs

  def grad_iteration(self, x, y_true, speed):
    res1 = []
    for n in self.NeuronsL1:
      res1.append(n.feed(x))
    res2 = []
    for n in self.NeuronsL2:
      res2.append(n.feed(res1))
    out1 = self.NeuronsL3.feed(res2)
    # Изменение весов на выходном слое
    delta = out1 - y_true
    grad = delta * fun_der_sigm(out1)
    for i in range(len(res2)):
      self.NeuronsL3.weights[i] = self.NeuronsL3.weights[i] - speed * grad * res2[i]
    self.NeuronsL3.bias = self.NeuronsL3.bias - speed * grad * 1
    # Изменение весов на втором слое 
    grad2 = []
    for i in range(len(res2)):
      grad2.append(grad * self.NeuronsL3.weights[i] * fun_der_sigm(res2[i]))
    grad2_bias = grad * self.NeuronsL3.bias * fun_der_sigm(1)
    for i in range(len(self.NeuronsL2)):
      for j in range(len(res1)):
        self.NeuronsL2[i].weights[j] = self.NeuronsL2[i].weights[j] - speed * grad2[i] * res1[j]
      self.NeuronsL2[i].bias = self.NeuronsL2[i].bias - speed * grad2_bias * 1
    # Изменение весов на первом слое
    grad3 = []
    for i in range(len(res1)):
      grad_sum = 0
      for j in range(len(self.NeuronsL2)):
        grad_sum += grad2[j] * self.NeuronsL2[j].weights[i] * fun_der_sigm(res1[i])
      grad3.append(grad_sum)
    grad3_bias = 0
    for j in range(len(self.NeuronsL2)):
      grad3_bias += grad2[j] * self.NeuronsL2[j].bias * fun_der_sigm(1)
    for i in range(len(self.NeuronsL1)):
      for j in range(len(x)):
        self.NeuronsL1[i].weights[j] = self.NeuronsL1[i].weights[j] - speed * grad3[i] * x[j]
      self.NeuronsL1[i].bias = self.NeuronsL1[i].bias - speed * grad3_bias * 1

network = Network(144)

epochs, errors = network.trainGrad(x_train, y_train, 1, 144)

plt.plot(epochs, errors)
plt.show()

x_test = []
y_test = []
path = '/content/drive/My Drive/TestCars/'
for i in range(1,6):
  x_test.append(GetImg(path + str(i) +'.png')[0])
  if i >= 3:
    y_test.append(0)
  else:
    y_test.append(1)

y_pred = network.predict(x_test)

def get_res(y):
  if y > 0.5:
    return 1
  return 0

y_pred = network.predict(x_test)
y_pred_binary = []
for i in range(len(y_pred)):
  y_pred_binary.append(get_res(y_pred[i])) 
acc = err_acc(y_test, y_pred_binary, 0.1)
print("acc:" + str(acc))
ress = ['Влево', 'Вправо']
plt.figure(figsize=(15,5))
for i in range(5):
  plt.subplot(1, 5, i + 1)
  plt.title(ress[get_res(y_pred[i])])
  img = np.reshape((x_test[i]), [12, 12])
  plt.imshow(img, cmap="gray")
